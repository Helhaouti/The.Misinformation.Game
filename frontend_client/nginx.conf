events {
	# Maximum number of simultaneous connections that can be opened by a worker process
	# Expected memory available (1GB) / (Estimated GET request size (700KB) * 2)
	worker_connections 731;
}

http {
	# Basic settings
	# Enables the use of sendfile() for more efficient file transfers
	sendfile on;

	# Ensures that packets are sent in full chunks, reducing network overhead
	tcp_nopush on;

	# Disables Nagle's algorithm to improve the speed of small data transmissions
	tcp_nodelay on;

	# Timeout for keep-alive connections (in seconds)
	keepalive_timeout 65;

	# Maximum size of the types hash table
	types_hash_max_size 2048;

	# Include MIME types definitions
	include /etc/nginx/mime.types;

	# Default MIME type if the file type is not recognized
	default_type application/octet-stream;

	# TODO: Further optimization: Deploy gziped versions static files.

	# Logging settings
	# Path to the access log file
	access_log /var/log/nginx/access.log;
	# Path to the error log file
	error_log /var/log/nginx/error.log;

	# Rate limiting
	# Defines a zone named "mylimit" with a size of 10MB, limiting clients to 10 requests per second
	limit_req_zone $binary_remote_addr zone=mylimit:10m rate=10r/s;
	# Applies the rate limit zone "mylimit" with a burst size of 20 requests
	limit_req zone=mylimit burst=20;

	server {
		# Server name wildcard, responds to any server name on port 8080
		server_name _;
		listen 8080;

		# Root directory for the server
		root /usr/share/nginx/html;

		# Default file to serve when a directory is requested
		index index.html;

		location / {
			# Denies all requests except GET requests
			limit_except GET {
				deny all;
			}

			# Tries to serve the requested URI, and if it doesn't exist, serves index.html (for single-page applications)
			try_files $uri /index.html;
		}

		location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
			# Denies all requests except GET requests
			limit_except GET {
				deny all;
			}

			# Sets the expiration time for cached files to the maximum
			expires max;

			# Adds a Cache-Control header to indicate that the response can be cached by any cache
			add_header Cache-Control "public";

			# Tries to serve the requested file, and if it doesn't exist, returns a 404 error
			try_files $uri =404;
		}

		# Configures the server to serve index.html when a 404 error occurs (for handling routes in single-page applications)
		error_page 404 /index.html;
	}
}
