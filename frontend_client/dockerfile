# Set the Node.js version for the base image using a Docker argument.
ARG NODE_VERSION=20

# Build stage for compiling assets
FROM node:${NODE_VERSION} AS build

# Set the working directory in the container.
WORKDIR /usr/src/app

# Copy the package.json (if available)
COPY package.json ./

# Install dependencies using npm.
RUN npm install

# Copy the application source code into the Docker image.
COPY ./ ./

# Generate the .env.production file with environment variables
ARG REACT_APP_API_URL
RUN echo "REACT_APP_API_URL=$REACT_APP_API_URL" > .env.production

# Build the application
RUN npm run build

# Start with a clean, lightweight nginx base image for serving the static files
FROM nginx:stable-alpine-slim

# Copy the static build directory from the build stage
COPY --from=build /usr/src/app/build /usr/share/nginx/html

# Copy nginx configuration.
COPY nginx.conf /etc/nginx/nginx.conf

# Create a non-privileged user 'nginxuser'
RUN addgroup -g 10001 nginxuser && \
    adduser -D -u 10001 -g "Nginx web user" -s /bin/sh -G nginxuser -h /home/nginxuser nginxuser

# Create a directory for the PID file.
RUN mkdir -p /var/run/nginx 
# Change ownership of the Nginx web directories and configuration files.
RUN chown -R nginxuser:nginxuser \
    /usr/share/nginx/html \
    /var/cache/nginx \
    /var/log/nginx \
    /etc/nginx \
    /var/run/nginx

# Set the user to run the nginx process
USER nginxuser

# Expose the HTTP service port.
EXPOSE 8080

# Start Nginx and keep it running in the foreground.
CMD ["nginx", "-g", "daemon off; pid /var/run/nginx/nginx.pid;"]
